//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "Chapter")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_name = "videoUrl", column_type = "Text", nullable)]
    pub video_url: Option<String>,
    pub position: i32,
    #[sea_orm(column_name = "isPublished", default_value = false)]
    pub is_published: bool,
    #[sea_orm(column_name = "isFree", default_value = false)]
    pub is_free: bool,
    #[sea_orm(column_name = "courseId", column_type = "Text")]
    pub course_id: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::course::Entity",
        from = "Column::CourseId",
        to = "super::course::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Course,
    #[sea_orm(has_one = "super::mux_data::Entity")]
    MuxData,
    #[sea_orm(has_many = "super::user_progress::Entity")]
    UserProgress,
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Course.def()
    }
}

impl Related<super::mux_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MuxData.def()
    }
}

impl Related<super::user_progress::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProgress.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
